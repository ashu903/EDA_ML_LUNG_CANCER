# -*- coding: utf-8 -*-
"""EDA_ML._LUNG_CANCER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vcSt6_2s49od8ndYsoNfcqwzSM2SAbBc
"""

# 1. Do the EDA on the given dataset: Lung cancer, and extract some useful information from this.
# Dataset Description:
# Lung cancer is one of the most prevalent and deadly forms of cancer worldwide, presenting significant
# challenges in early detection and effective treatment. To aid in the global effort to understand and combat this
# disease, we are excited to introduce our comprehensive Lung Cancer Dataset.

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings("ignore")
import zipfile

# Specify the zip file path
zip_file_path = "/content/lungs_cancer.zip"

# Open the zip file
with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    # List the files in the zip file
    file_list = zip_ref.namelist()

    # Assuming you want to read the CSV file, find it
    csv_file = [f for f in file_list if f.endswith('.csv')][0]

    # Extract the CSV file to a temporary file
    with zip_ref.open(csv_file) as file, open('temp.csv', 'wb') as temp_file:
        temp_file.write(file.read())

# Read the extracted CSV file into a pandas DataFrame
df = pd.read_csv("temp.csv")

# Optionally delete the temporary file
!rm temp.csv

df.head()

df.isnull()

df.isnull().sum()

df.columns

df.tail(3)

df.describe() # statistical information about numerical columns

df.sample()

df.shape

df.describe(include ="all") # categorical data

df.dtypes

df.info()

df.duplicated().sum()

df.drop_duplicates()

df.drop_duplicates().shape

df.dtypes

df["LUNG_CANCER"].dtype

df["YELLOW_FINGERS"].dtype

df["ALCOHOL_CONSUMING"].dtype

type(df.LUNG_CANCER )

df.LUNG_CANCER.str.isnumeric()

"1".isnumeric()

"a".isnumeric()

df[df.LUNG_CANCER.str.isnumeric()]

df[~df.LUNG_CANCER.str.isnumeric()]

df.reset_index(drop = True,inplace=True)

df["ALCOHOL_CONSUMING"].unique()

df["CHEST_PAIN"].unique()

df["GENDER"].unique()

categorical_feature = [feature for feature in df.columns if df[feature].dtype == "O"]

categorical_feature

numerical_feature = [feature for feature in df.columns if df[feature].dtype != "O"]

numerical_feature

# categorical data >> frequency_plot ,bar_chart , pie_chart
# numerical data >> histogram,distplot,boxplot,linechart,pairplot,scatterplot

df["GENDER"].value_counts()

df["LUNG_CANCER"].value_counts()

df["GENDER"].value_counts(normalize=True)*100

df["LUNG_CANCER"].value_counts(normalize = True)*100

for col in categorical_feature:
  print(f"{col} : {df[col].value_counts(normalize = True)*100}")

"""categorical_feature_ analysis"""

sns.countplot(x=df["GENDER"])
plt.show()

sns.countplot(x=df["LUNG_CANCER"])
plt.show()

"""numerical_feature"""

numerical_feature

sns.distplot(df["ALCOHOL_CONSUMING"],kde=True)
plt.show()

sns.distplot(df["AGE"])
plt.show()

sns.distplot(df["ALLERGY"],kde=True)
plt.show()

sns.kdeplot(df["COUGHING"])

plt.figure(figsize=(20,15))
category = ["AGE","SMOKING"]

for i in range(0,len(category)):
  plt.subplot(2,2,i+1)
  sns.countplot(x=df[category[i]],palette="Set2")
  plt.xlabel(category[i])
  plt.xticks(rotation=45)
  plt.tight_layout()

# which category is the most popular category in the app?
# pie_chart

df[['GENDER',"LUNG_CANCER"]].value_counts().plot.pie(figsize=(12,12),autopct='%1.1f%%')

sns.boxplot(df["AGE"])

sns.heatmap(pd.crosstab(df['ALCOHOL_CONSUMING'],df['AGE'],normalize='columns')*100)

pd.crosstab(df['AGE'],df['ALCOHOL_CONSUMING'],normalize='index').plot(kind='bar',stacked=True)

sns.pairplot(df)

df.YELLOW_FINGERS.value_counts().plot(kind="bar")

for i in df.columns:
  sns.histplot(df[i],kde=True)

sns.catplot(x='AGE',y="ALCOHOL_CONSUMING",data=df,kind="box")

fig,axis=plt.subplots(1,2,figsize=(15,7))
plt.subplot(121)
sns.histplot(data=df,x='AGE',bins=30,kde=True,color='g')
plt.subplot(122)
sns.histplot(data=df,x='AGE',bins=30,kde=True,hue='GENDER')

# Smokers count
plt.figure(figsize=(10,10))
sns.countplot(x="SMOKING", data=df)

# Percentage of people with lung cancer in the dataset

# 100. * cancer_data.LUNG_CANCER.value_counts() / len(cancer_data.LUNG_CANCER)
df.LUNG_CANCER.value_counts().plot(kind='pie',figsize=(8, 8),autopct='%1.1f%%')

plt.figure(figsize = (12,12))
sns.histplot(df['AGE'])

# Lung Cancer across Genders
plt.figure(figsize=(10,10))
sns.countplot(data=df,x='GENDER',hue='LUNG_CANCER')
plt.legend(["Has cancer", 'Does not have cancer'])

